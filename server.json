// MCP OMNI Server â€” XL Edition (ONE server for everything)
// âœ… Works on Railway. CommonJS. Listens on process.env.PORT.
// âœ… All vendor calls handled here (Anthropic/HeyGen/Perplexity/Apify/Apollo/IDX).
// âœ… Secured with x-auth-token (set AUTH_TOKEN in Railway Variables).
// âœ… Includes life-event scoring (relocation/PCS), geo-boost, and "detect-but-drop" sensitive signals.
// ðŸš« DO NOT paste real API keys in this file. Use Railway â†’ Variables.

require('dotenv').config();
const express = require('express');
const cors = require('cors');
const axios = require('axios');
const axiosRetry = require('axios-retry').default;

const app = express();
app.disable('x-powered-by');
app.use(express.json({ limit: '4mb' }));
app.use(cors({
  origin: (origin, cb) => cb(null, true),
  methods: ['GET','POST'],
  allowedHeaders: ['Content-Type','x-auth-token']
}));

// -------- Security: shared token --------
app.use((req, res, next) => {
  const expected = process.env.AUTH_TOKEN;
  if (!expected) return next(); // dev mode if not set
  const got = req.get('x-auth-token');
  if (got !== expected) return res.status(401).json({ ok:false, error:'unauthorized' });
  next();
});

// -------- Health --------
app.get('/', (_req, res) => res.json({ ok:true, service:'MCP OMNI XL', time:new Date().toISOString() }));
app.get('/health', (_req, res) => res.status(200).send('OK'));

// -------- Axios helper --------
function makeClient({ baseURL, headers = {} }) {
  const c = axios.create({ baseURL, headers, timeout: 25000 });
  axiosRetry(c, { retries: 3, retryDelay: axiosRetry.exponentialDelay, retryCondition: e => !e.response || e.response.status >= 500 });
  return c;
}

// -------- Provider registry (handles Bearer vs X-API-Key etc.) --------
const PROVIDERS = {
  anthropic: {
    baseURL: 'https://api.anthropic.com',
    env: 'ANTHROPIC_API_KEY',
    headers: k => ({ 'x-api-key': k, 'anthropic-version': '2023-06-01', 'content-type': 'application/json' })
  },
  heygen: {
    baseURL: 'https://api.heygen.com',
    env: 'HEYGEN_API_KEY',
    headers: k => ({ 'X-API-Key': k, 'content-type': 'application/json' })
  },
  perplexity: {
    baseURL: 'https://api.perplexity.ai',
    env: 'PERPLEXITY_API_KEY',
    headers: k => ({ Authorization: `Bearer ${k}`, 'content-type': 'application/json' })
  },
  apify: {
    baseURL: 'https://api.apify.com',
    env: 'APIFY_TOKEN',
    headers: k => ({ Authorization: `Bearer ${k}` })
  },
  apollo: {
    baseURL: 'https://api.apollo.io',
    env: 'APOLLO_API_KEY',
    headers: k => ({ 'X-Api-Key': k, 'content-type': 'application/json' })
  },
  idx: {
    baseURL: 'https://api.idxbroker.com',
    env: 'IDX_ACCESS_KEY',
    headers: k => ({ accesskey: k, outputtype: 'json' })
  },
  ghl: {
    // Optional: server-side Conversations send (requires refresh token)
    baseURL: 'https://services.leadconnectorhq.com',
    env: 'GHL_REFRESH_TOKEN',
    headers: k => ({ Authorization: `Bearer ${k}`, Version: '2021-07-28', 'content-type': 'application/json' })
  }
};

function client(name) {
  const p = PROVIDERS[name];
  if (!p) return null;
  const key = process.env[p.env];
  if (!key) return null;
  return makeClient({ baseURL: p.baseURL, headers: p.headers(key) });
}

// Optional server-side GHL OAuth refresh
async function getGhlAccessToken() {
  const cid = process.env.GHL_CLIENT_ID;
  const secret = process.env.GHL_CLIENT_SECRET;
  const refresh = process.env.GHL_REFRESH_TOKEN;
  if (!cid || !secret || !refresh) return null;
  const r = await axios.post('https://services.leadconnectorhq.com/oauth/token', {
    client_id: cid,
    client_secret: secret,
    grant_type: 'refresh_token',
    refresh_token: refresh
  }, { headers: { 'content-type': 'application/json' }, timeout: 15000 });
  return r.data?.access_token || null;
}

// -------- 1) Social Discovery (Perplexity search for public leads) --------
app.post('/api/discover', async (req, res) => {
  try {
    const perplex = client('perplexity');
    const { queries = [], location = {} } = req.body || {};
    if (!perplex) {
      // Mock if no key; return URLs to scrape
      const items = queries.slice(0, 3).map((q, i) => ({
        platform: 'web',
        url: `https://example.com/result-${i+1}`,
        content: `Public mention about ${location.city || 'your area'}: ${q}`,
        signals: ['moving','looking for'],
        timestamp: new Date().toISOString()
      }));
      return res.json({ items, provider: 'mock' });
    }
    // Minimal Perplexity call
    const responses = [];
    for (const q of queries) {
      const r = await perplex.post('/chat/completions', {
        model: 'sonar-small-online',
        messages: [{ role: 'user', content: q }],
        search_domain_filter: ['reddit.com','facebook.com','instagram.com','youtube.com','zillow.com','realtor.com']
      });
      responses.push(r.data);
    }
    res.json({ items: responses, provider: 'perplexity' });
  } catch (e) {
    console.error('discover error:', e?.response?.data || e.message);
    res.status(500).json({ ok:false, error:'discover failed' });
  }
});

// -------- 2) Scrape public pages (Apify generic web scraper) --------
app.post('/api/scrape', async (req, res) => {
  try {
    const apify = client('apify');
    const { urls = [] } = req.body || {};
    if (!apify) {
      const out = urls.map((u,i)=>({ url: u, content: `Sample extracted text from ${u}`, platform:'web' }));
      return res.json({ items: out, provider: 'mock' });
    }
    const actor = 'apify/web-scraper';
    const input = {
      startUrls: urls.map(u => ({ url: u })),
      maxRequestRetries: 2,
      pageFunction: `async function pageFunction(context) {
        const text = document.body.innerText.slice(0, 5000);
        return { url: context.request.url, content: text };
      }`,
      proxyConfiguration: { useApifyProxy: true }
    };
    const start = await apify.post(`/v2/actor-tasks/${encodeURIComponent(actor)}/runs`, input);
    const runId = start.data?.id;
    res.json({ runId, note: 'Use Apify dataset to fetch results when run completes.', provider: 'apify' });
  } catch (e) {
    console.error('scrape error:', e?.response?.data || e.message);
    res.status(500).json({ ok:false, error:'scrape failed' });
  }
});

// -------- 3) Fuse + Score --------
app.post('/api/fuse-score', (req, res) => {
  try {
    const { items = [], location = {} } = req.body || {};
    const CITY = String(location.city || '').toLowerCase();
    const HOODS = (location.neighborhoods || []).map(s => String(s).toLowerCase());
    const ZIPS = (location.zipCodes || []).map(z => String(z));

    const ALLOWED_EVENT_KEYWORDS = [
      'relocating for work','job transfer','moving for work','new role in',
      'accepted an offer in','pcs orders','permanent change of station','reporting to base'
    ];
    const SENSITIVE_KEYWORDS = [
      'pregnant','expecting','new baby','newborn','engaged','fiancÃ©','fiance','getting married'
    ];

    function includesAny(text, arr) {
      const t = String(text || '').toLowerCase();
      return arr.some(k => t.includes(k));
    }
    function geoBoost(text) {
      const t = String(text||'').toLowerCase();
      let boost = 0;
      if (CITY && t.includes(CITY)) boost += 1;
      if (HOODS.some(h => t.includes(h))) boost += 1;
      if (ZIPS.some(z => new RegExp(`\\b${z}\\b`).test(t))) boost += 1;
      return Math.min(boost, 2);
    }

    const leads = [];
    for (const r of items) {
      const txt = String(r.content || '').toLowerCase();
      let base = 0;
      if (txt.includes('looking for') || txt.includes('searching for')) base += 3;
      if (txt.includes('buy') || txt.includes('purchase')) base += 3;
      if (txt.includes('agent') || txt.includes('realtor')) base += 2;
      if (txt.includes('pre-approved') || txt.includes('pre approved')) base += 4;
      if (txt.includes('cash buyer')) base += 4;
      if (txt.includes('urgent') || txt.includes('asap')) base += 3;
      if (txt.includes('moving') || txt.includes('relocating')) base += 2;

      if (includesAny(txt, ALLOWED_EVENT_KEYWORDS)) {
        base += 2;
        r.signals = Array.from(new Set([...(r.signals||[]), 'relocation']));
      }
      if (includesAny(txt, SENSITIVE_KEYWORDS)) {
        r._transientSensitive = true;
      }

      base += geoBoost(txt);
      const score = Math.max(0, Math.min(10, base));
      leads.push({
        source: r.source || 'public',
        platform: r.platform || 'web',
        url: r.url,
        content: r.content,
        signals: r.signals || [],
        finalIntentScore: score,
        urgency: score>=8?'immediate':score>=6?'high':score>=4?'medium':'low',
        timeline: score>=8?'1-14 days':score>=6?'2-8 weeks':score>=4?'2-6 months':'6+ months',
        city: location.city || 'Unknown',
        state: location.state || 'Unknown',
        timestamp: new Date().toISOString()
      });
    }
    res.json({ leads });
  } catch (e) {
    console.error('fuse-score error:', e?.response?.data || e.message);
    res.status(500).json({ ok:false, error:'fuse-score failed' });
  }
});

// -------- 4) Content generation (Claude) --------
app.post('/api/content-generation', async (req, res) => {
  try {
    const { location = {}, lead = {} } = req.body || {};
    const k = process.env.ANTHROPIC_API_KEY;
    if (!k) {
      return res.json({
        smsA: `Hi ${lead.firstName||'there'}! Quick question about ${location.city||'your area'} homes.`.slice(0,160),
        smsB: `Hello! Want a short ${location.city||'your area'} market update?`.slice(0,160),
        emailSubjectA: `${location.city||'Your area'} market snapshot for you`,
        emailBodyA: `Hi ${lead.firstName||'there'},\nHereâ€™s a helpful update.`,
        emailSubjectB: `Quick ${location.city||'Your area'} real estate insights`,
        emailBodyB: `Hi ${lead.firstName||'there'},\nSome useful info for your search.`,
        videoScript: `Hi ${lead.firstName||'there'}, quick update on ${location.city||'your area'} and how I can help.`,
        provider: 'mock'
      });
    }
    const anthropic = makeClient({ baseURL: 'https://api.anthropic.com', headers: { 'x-api-key': k, 'anthropic-version':'2023-06-01','content-type':'application/json' } });
    const r = await anthropic.post('/v1/messages', {
      model: 'claude-3-haiku-20240307',
      max_tokens: 900,
      system: 'You are a Fair Housingâ€“compliant real estate copywriter. No steering.',
      messages: [{
        role: 'user',
        content: `Return STRICT JSON with keys: smsA, smsB, emailSubjectA, emailBodyA, emailSubjectB, emailBodyB, videoScript. Lead=${JSON.stringify(lead)}; City=${location.city}.`
      }]
    });
    res.json(r.data);
  } catch (e) {
    console.error('content-generation error:', e?.response?.data || e.message);
    res.status(500).json({ ok:false, error:'content-generation failed' });
  }
});

// -------- 5) HeyGen passthrough --------
app.post('/api/heygen/video', async (req, res) => {
  try {
    const key = process.env.HEYGEN_API_KEY;
    if (!key) return res.status(400).json({ ok:false, error:'HEYGEN_API_KEY not set' });
    const heygen = makeClient({ baseURL: 'https://api.heygen.com', headers: { 'X-API-Key': key, 'content-type':'application/json' } });
    const r = await heygen.post('/v2/video/generate', req.body);
    res.json(r.data);
  } catch (e) {
    console.error('heygen error:', e?.response?.data || e.message);
    res.status(500).json({ ok:false, error:'heygen failed' });
  }
});

// -------- 6) Apollo Enrich (optional) --------
app.post('/api/apollo/enrich', async (req, res) => {
  try {
    const apollo = client('apollo');
    if (!apollo) return res.status(400).json({ ok:false, error:'APOLLO_API_KEY not set' });
    const r = await apollo.post('/v1/people/enrich', req.body);
    res.json(r.data);
  } catch (e) {
    console.error('apollo error:', e?.response?.data || e.message);
    res.status(500).json({ ok:false, error:'apollo failed' });
  }
});

// -------- 7) IDX Leads (optional) --------
app.get('/api/idx/leads', async (req, res) => {
  try {
    const idx = client('idx');
    if (!idx) return res.status(400).json({ ok:false, error:'IDX_ACCESS_KEY not set' });
    const r = await idx.get('/leads/lead');
    res.json(r.data);
  } catch (e) {
    console.error('idx error:', e?.response?.data || e.message);
    res.status(500).json({ ok:false, error:'idx failed' });
  }
});

// -------- 8) Public records passthrough (Socrata/Open Data) --------
app.post('/api/public-records', async (req, res) => {
  try {
    const { url } = req.body || {};
    if (!url) return res.status(400).json({ ok:false, error:'url required' });
    const r = await axios.get(url, { timeout: 20000 });
    res.json({ items: r.data });
  } catch (e) {
    console.error('public-records error:', e?.response?.data || e.message);
    res.status(500).json({ ok:false, error:'public-records failed' });
  }
});

// -------- 9) Mortgage event ingest (first-party lender signals) --------
app.post('/api/mortgage-event', (req, res) => {
  const payload = req.body || {};
  console.log('Mortgage event:', payload.event, 'for', payload?.contact?.email || payload?.contact?.phone);
  res.json({ ok:true });
});

// -------- 10) Analytics + Webhook --------
app.post('/api/analytics-tracking', (req, res) => {
  console.log('Analytics:', req.body?.event, req.body?.metrics);
  res.json({ ok:true });
});
app.post('/webhooks/video-complete', (req, res) => {
  console.log('Video complete payload:', req.body);
  res.json({ ok:true });
});

// -------- 11) (Optional) GHL Conversations send via server --------
app.post('/api/ghl/send-email', async (req, res) => {
  try {
    const access = await getGhlAccessToken();
    if (!access) return res.status(400).json({ ok:false, error:'GHL_CLIENT_ID/SECRET/REFRESH_TOKEN not set' });
    const ghl = makeClient({ baseURL: 'https://services.leadconnectorhq.com', headers: { Authorization: `Bearer ${access}`, Version: '2021-07-28', 'content-type': 'application/json' } });
    const r = await ghl.post('/conversations/messages', req.body);
    res.json(r.data);
  } catch (e) {
    console.error('ghl send error:', e?.response?.data || e.message);
    res.status(500).json({ ok:false, error:'ghl send failed' });
  }
});

// -------- Global error guard --------
app.use((err, _req, res, _next) => {
  console.error('Unhandled error:', err);
  res.status(500).json({ ok:false, error:'server error' });
});

const port = process.env.PORT || 8080;
app.listen(port, () => console.log('MCP OMNI XL listening on', port));
