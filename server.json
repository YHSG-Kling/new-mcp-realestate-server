// === MCP Real Estate Server (ONE server for everything) ===
// No secrets in code. All API keys come from Railway Variables.
// Secured with a shared x-auth-token header.

require('dotenv').config();
const express = require('express');
const cors = require('cors');
const axios = require('axios');

const app = express();
app.use(cors());
app.use(express.json({ limit: '2mb' }));

// Optional security: require x-auth-token to match AUTH_TOKEN in Railway Variables
app.use((req, res, next) => {
  const expected = process.env.AUTH_TOKEN;
  if (!expected) return next(); // dev mode if not set
  const got = req.get('x-auth-token');
  if (got !== expected) return res.status(401).json({ ok: false, error: 'unauthorized' });
  next();
});

// Health (so you can test your Railway URL)
app.get('/', (_req, res) => {
  res.json({ ok: true, service: 'MCP Real Estate', time: new Date().toISOString() });
});

// === Endpoints your n8n workflow calls ===

// 1) Public/social discovery (mock results so wiring works even with no keys yet)
app.post('/api/social-discovery', (req, res) => {
  const city = req.body?.location?.city || 'your area';
  const queries = req.body?.searchQueries || [];
  const items = queries.slice(0, 3).map((q, i) => ({
    platform: 'web',
    url: `https://example.com/result-${i + 1}`,
    content: `Public mention about ${city}: ${q}`,
    signals: ['moving'],
    timestamp: new Date().toISOString()
  }));
  res.json({ items, count: items.length, provider: 'mock' });
});

// 2) Multi-source fusion (simple scoring; n8n also scores/boosts later)
app.post('/api/multi-source-fusion', (req, res) => {
  const sources = req.body?.sources || [];
  const loc = req.body?.location || {};
  const leads = [];
  for (const s of sources) {
    const arr = s?.data?.items || s?.data || [];
    if (!Array.isArray(arr)) continue;
    for (const it of arr) {
      const txt = String(it.content || '').toLowerCase();
      let score = 0;
      if (txt.includes('looking for') || txt.includes('searching for') || txt.includes('moving')) score += 4;
      if (txt.includes('buy') || txt.includes('purchase')) score += 3;
      score = Math.min(10, score);
      leads.push({
        source: 'mcp-fusion',
        platform: it.platform || 'web',
        url: it.url,
        content: it.content,
        signals: it.signals || [],
        finalIntentScore: score,
        urgency: score >= 8 ? 'immediate' : score >= 6 ? 'high' : score >= 4 ? 'medium' : 'low',
        timeline: score >= 8 ? '1-14 days' : score >= 6 ? '2-8 weeks' : score >= 4 ? '2-6 months' : '6+ months',
        city: loc.city || 'Unknown',
        state: loc.state || 'Unknown',
        timestamp: new Date().toISOString()
      });
    }
  }
  res.json({ leads });
});

// 3) Content generation (Claude). If no key set, returns safe mock content.
app.post('/api/content-generation', async (req, res) => {
  try {
    const key = process.env.ANTHROPIC_API_KEY;
    const city = req.body?.location?.city || 'your area';
    const lead = req.body?.lead || {};
    if (!key) {
      return res.json({
        smsA: `Hi ${lead.firstName || 'there'}! Quick question about ${city} homes.`.slice(0, 160),
        smsB: `Hello! Want a short ${city} market update?`.slice(0, 160),
        emailSubjectA: `${city} market snapshot for you`,
        emailBodyA: `Hi ${lead.firstName || 'there'},\nHere’s a helpful update on ${city}.`,
        emailSubjectB: `Quick ${city} real estate insights`,
        emailBodyB: `Hi ${lead.firstName || 'there'},\nSome useful info about ${city} homes.`,
        videoScript: `Hi ${lead.firstName || 'there'}, here’s a quick ${city} update and how I can help.`,
        provider: 'mock'
      });
    }
    const resp = await axios.post('https://api.anthropic.com/v1/messages', {
      model: 'claude-3-haiku-20240307',
      max_tokens: 900,
      system: 'You are a Fair Housing–compliant real estate copywriter. No steering.',
      messages: [{
        role: 'user',
        content: `Return STRICT JSON with keys: smsA, smsB, emailSubjectA, emailBodyA, emailSubjectB, emailBodyB, videoScript. Lead=${JSON.stringify(lead)}; City=${city}.`
      }]
    }, {
      headers: { 'x-api-key': key, 'anthropic-version': '2023-06-01', 'content-type': 'application/json' },
      timeout: 20000
    });
    res.json(resp.data);
  } catch (e) {
    console.error('Claude error:', e?.response?.data || e.message);
    res.status(500).json({ ok: false, error: 'content-generation failed' });
  }
});

// 4) HeyGen passthrough (uses your HEYGEN_API_KEY from env)
app.post('/api/heygen/video', async (req, res) => {
  try {
    const apiKey = process.env.HEYGEN_API_KEY;
    if (!apiKey) return res.status(400).json({ ok: false, error: 'HEYGEN_API_KEY not set' });
    const r = await axios.post('https://api.heygen.com/v2/video/generate', req.body, {
      headers: { 'X-API-Key': apiKey, 'Content-Type': 'application/json' },
      timeout: 30000
    });
    res.json(r.data);
  } catch (e) {
    console.error('HeyGen error:', e?.response?.data || e.message);
    res.status(500).json({ ok: false, error: 'heygen failed' });
  }
});

// 5) Analytics + 6) Webhook (for HeyGen video ready)
app.post('/api/analytics-tracking', (req, res) => {
  console.log('Analytics:', req.body?.event, req.body?.metrics);
  res.json({ ok: true });
});
app.post('/webhooks/video-complete', (req, res) => {
  console.log('Video complete payload:', req.body);
  res.json({ ok: true });
});

// Start
const port = process.env.PORT || 8080;
app.listen(port, () => console.log('MCP server running on', port));
